# -*- coding: utf-8 -*-
"""#DS5H17_Farisyah Lutfiah Hanis_Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vqs8KJiNkjAN2IVpnCnbrIPp45Ket-PR

#####NAMA : FARISYAH LUTFIAH HANIS
#####ID   : DS5H17

#IMPORT LIBRARY & DATASET
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from datetime import datetime
from sklearn.preprocessing import LabelEncoder

from google.colab import drive
drive.mount('/content/drive')

"""#DATA UNDERSTANDING"""

df = pd.read_csv('/content/drive/My Drive/Dataset/train_housepricing.csv')
pd.set_option('display.max_columns', 100) #agar seluruh fitur dapat terlihat
df.head(10)

df.info()

"""- Fitur berjumlah 81, dengan tipe data yaitu integer, float, dan char
- Total baris berjumlah 1460
- Fitur yang mengandung missing value yaitu Alley, MasVnrType, MasVnrArea, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, Electrical, FireplaceQu, GarageType, GarageYrBlt, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature.
"""

# untuk melihat jumlah baris dan kolom
df.shape

pd.set_option('display.max_columns', 100)
df.describe()

"""Harga rumah ini dari range 34900 sampai 755000 dengan rata-rata harga rumah 163000. Sebaran harga rumahnya yaitu right skew, terlihat dari nilai mean lebih besar mediannya, artinya data cenderung lebih banyak berkumpul pada nilai minimum."""

pd.set_option('display.max_columns', 43)
df.describe(include=object) #khusus tipe data object

"""#DATA PREPARATION

##1. Missing Value

###Check Missing Value
"""

df.isnull().sum()

missing_values = df.isnull().sum()
print(missing_values[missing_values > 0])

"""Ini merupakan daftar fitur fitur yang memiliki missing value"""

missing_values = df.isnull().sum()/len(df)*100
print(missing_values[missing_values > 0])

"""Waw, ternyata ada fitur yang missing valuenya hampir 100%üòØ

###Handling Missing Value
"""

#Dropping missing value
df = df.drop(['Alley','Fence','PoolQC','MiscFeature'], axis=1)
df.head()

"""Fitur fitur tersebut dihapus karena memiliki missing value lebih dari 80%"""

# cek kembali jumlah baris dan kolom
df.shape

#Imputing missing values LotFrontage
df['LotFrontage'].fillna(df['LotFrontage'].mean(), inplace=True)

#Imputing missing values LotFrontage
df['MasVnrArea'].fillna(df['MasVnrArea'].median(), inplace=True)

#Imputing missing values GarageYrBlt
df['GarageYrBlt'].fillna(df['GarageYrBlt'].median(), inplace=True)

#Menghitung nilai modus untuk semua kolom kategorikal
mode_values = df.select_dtypes(include='object').mode().iloc[0]

#Mengisi missing value di kolom kategorikal dengan nilai modus
df.fillna(mode_values, inplace=True)

missing_values = df.isnull().sum()
print(missing_values[missing_values > 0])

"""Missing value sudah tidak ada lagiüëç"""

df.isnull().sum()

"""##2. Duplicates

###Check Duplicate
"""

# Check duplicate values
df[df.duplicated(keep=False)]

"""Ternyata tidak ada nilai yang duplikatüòÄ

##3. Outliers

###SalePrice
"""

fig, ax = plt.subplots(figsize=(3,6))
sns.boxplot(data=df['SalePrice'])

"""Pada fitur SalePrice terdapat nilai outlier diluar batas nilai maksimum"""

#Tentukan batas bawah dan batas atas untuk outlier
Q1 = df['SalePrice'].quantile(0.25)
Q3 = df['SalePrice'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outlier_value = df[(df['SalePrice'] < lower_bound) | (df['SalePrice'] > upper_bound)]
outlier_value

"""Nilai outliersnya adalah nilai yang lebih dari upper_boundnya"""

#hapus nilai yang outlier
df = df[(df['SalePrice'] >= lower_bound) & (df['SalePrice'] <= upper_bound)]

#cek kembali baris dan kolom
df.shape

fig, ax = plt.subplots(figsize=(3,6))
sns.boxplot(data=df['SalePrice'])

"""###YearBuilt"""

fig, ax = plt.subplots(figsize=(3,6))
sns.boxplot(data=df['YearBuilt'])

"""Pada fitur YearBuilt terdapat nilai outlier diluar batas nilai minimum

IMPUTATION
"""

#Hitung nilai median dari atribut YearBuilt
median_year_built = df['YearBuilt'].median()

#Tentukan batas bawah dan batas atas untuk outlier
Q1 = df['YearBuilt'].quantile(0.25)
Q3 = df['YearBuilt'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

#Imputasi outlier dengan nilai median
data_imputasi = df.loc[(df['YearBuilt'] < lower_bound) | (df['YearBuilt'] > upper_bound), 'YearBuilt'] = median_year_built

"""### GrLivArea"""

fig, ax = plt.subplots(figsize=(3,6))
sns.boxplot(data=df['GrLivArea'])

"""Pada fitur GrLivArea terdapat nilai outlier diluar batas nilai maksimum

IMPUTATION
"""

#Hitung nilai median dari atribut YearBuilt
mean_grade_living = df['GrLivArea'].mean()

#Tentukan batas bawah dan batas atas untuk outlier
Q1 = df['GrLivArea'].quantile(0.25)
Q3 = df['GrLivArea'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

#Imputasi outlier dengan nilai mean
df.loc[(df['GrLivArea'] < lower_bound) | (df['GrLivArea'] > upper_bound), 'GrLivArea'] = mean_grade_living

"""###LotArea"""

fig, ax = plt.subplots(figsize=(3,6))
sns.boxplot(data=df['LotArea'])

"""Pada fitur LotArea terdapat nilai outlier diluar batas nilai minimum dan maksimum

IMPUTATION
"""

#Hitung nilai mean dari atribut YearBuilt
mean_grade_living = df['LotArea'].mean()

#Tentukan batas bawah dan batas atas untuk outlier
Q1 = df['LotArea'].quantile(0.25)
Q3 = df['LotArea'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

#Imputasi outlier dengan nilai mean
df.loc[(df['LotArea'] < lower_bound) | (df['LotArea'] > upper_bound), 'LotArea'] = mean_grade_living

"""##Encoding"""

#Definisikan kategori ke nilai numerik
mapping = {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0}

#Label Encoding untuk semua kolom ordinal
df_encoded_qual = df.apply(lambda col: col.map(mapping))

pd.set_option('display.max_columns', 100)
df_encoded_qual.head(10)

"""Fitur fitur yang kategorikal ordinal menjadi diubah menjadi nilai numerik. Pada dataset ini, fitur yang bernilai Ex (Excellent), Gd (Good), TA (Typical/Average), Fa (Fair), Po (Poor), NA (None) diubah menjadi tipe numerik 0, 1, 2, 3, 4, dan 5."""

df['CentralAirEncoding'] = df['CentralAir'].map({'N': 0, 'Y': 1})
df['CentralAirEncoding'].head()

"""Mengubah nilai pada fitur CentralAir yang bertipe kategorikal Y (Yes) dan N (No) menjadi tipe numerik 1 dan 0 dimana 0 (N/No) dan 1 (Y/Yes).

#FEATURE ENGINEERING

Berikut ini merupakan fitur fitur baru yang dbuat berdasarkan fitur yang sebelumnya telah ada

## 1) Usia Rumah saat terjual
"""

df['AgeSold'] = df['YrSold'] - df['YearBuilt']
df['AgeSold'].head(10)

"""Dengan melakukan pengurangan antara tahun rumah terjual dan tahun rumah dibangun, menghasilkan fitur baru yaitu **usia rumah saat terjual**

## 2) Usia Rumah (sekarang)
"""

now = datetime.now().year
df['AgeHouse'] = now - df['YearBuilt']
df['AgeHouse'].head(10)

"""Memanfaatkan package datetime, dapat menghasilkan informasi baru yaitu **usia rumah saat ini** dengan melakukan pengurangan antara tahun saat ini dan tahun saat rumah dibangun. Informasi ini sangat bermanfaat bagi pembeli karena dapat mengetahui selama apa rumah tersebut telah dibangun.

## 3) Jarak waktu rumah dibangun dan direnovasi
"""

df['RenovatedTime'] = df['YearRemodAdd'] - df['YearBuilt']
df['RenovatedTime'].head(10)

"""Dengan melakukan pengurangan tahun rumah direnovasi dan tahun rumah dibangun, kita dapat mengetahui dalam **rentang berapa tahun rumah tersebut di renovasi** semenjak dibangun. Informasi ini berguna bagi penjual dan agen properti agar bisa mengambil keputusan apakah rumah tersebut masih layak atau perlu direnovasi ulang.

## 4) Sisa Lahan
"""

df['GardenArea'] = df['LotArea'] - df['GrLivArea']
df['GardenArea'].head(10)

"""Dengan melakukan pengurangan antara luas area lot dan ruang tamu di area pekarangan, kita dapat mengetahui **luas lahan yang tersisa** yang bisa dimanfaatkan untuk area lain seperti taman

## 5) Total Kamar Mandi
"""

df['TotalBath'] = df['BsmtFullBath'] + df['FullBath'] + df['BsmtHalfBath'] + df['HalfBath']
df['TotalBath'].head(10)

"""Dengan menjumlahkan seluruh kamar mandi, pembeli dapat mengetahui rumah mana yang memiliki jumlah kamar mandi sesuai dengan kebutuhannya

## 6) Jumlah Lantai
"""

df['TotalFlr'] = (df['1stFlrSF'] > 0).astype(int) + (df['2ndFlrSF'] > 0).astype(int)
df['TotalFlr'].head(10)

"""Fitur ini dibuat untuk mengetahui apakah rumah tersebut hanya memiliki 1 lantai atau lebih. Informasi ini bermanfaat bagi penjual maupun pembeli. Bagi penjual, informasi ini dapat membantu mengambil keputusan terkait harga rumah yang sesuai dengan jumlah lantainya. Bagi pembeli, jumlah lantai rumah tersebut dapat dijadikan pertimbangan dalam sesuai kebutuhannya.

## 7) Rasio basement terhadap luas keseluruhan
"""

df['BasementRatio'] = ((df['TotalBsmtSF'] / df['LotArea']) *100).round(2).astype(str) + '%'
df['BasementRatio'].head(10)

"""Fitur ini digunakan mengetahui sejauh mana luas basement mempengaruhi luas keseluruhan properti yang bermanfaat bagi penjual dalam mengambil keputusan terkait harga rumah

## 8) Konversi tanggal lengkap
"""

df['DateConversion'] = pd.to_datetime(df['YrSold'].astype(str) + '-' + df['MoSold'].astype(str) + '-1')
df['DateConversion'].head(10)

"""Konversi tanggal ini memudahkan kita dalam melihat pada bulan dan tahun berapa rumah tersebut terjual

## 9) Rata Rata Kualitas
"""

df['AverageQual'] = df_encoded_qual[['ExterQual', 'BsmtQual', 'KitchenQual', 'HeatingQC']].mean(axis=1)
df['AverageQual'].head

"""Ini merupakan nilai kategorikal ordinal yang sebelumnya di encode dengan label encoding. Fitur ini berguna untuk melihat nilai dari rata rata kualitas dari beberapa fitur, yaitu ExterQual, BsmtQual, KitchenQual, dan HeatingQC yang dapat berpengaruh terhadap harga jual rumah

## 10) Jumlah Fasilitas Rumah
"""

df['TotalFacil'] = df[['Fireplaces', 'PoolArea', 'CentralAirEncoding']].sum(axis=1)
df['TotalFacil'].head(10)

"""Fitur ini memberikan informasi terkait jumlah fasilitas yang dimiliki rumah tersebut, apakah rumah tersebut memiliki FirePlace, PoolArea, CentralAir, atau bahkan ketiganya."""

# setelah beberapa fitur dbuat, mari kita cek datasetnya
pd.set_option('display.max_columns', 100)
df.head()

# cek jumlah baris dan kolom setelah penambahan fitur
df.shape

"""##Mengukur Signifikansi Fitur

Mengukur signifikansi antara fitur fitur terhadap target menggunakan Heatmap Korelasi
"""

new_features = ["AgeHouse", "RenovatedTime", "GardenArea", "AgeSold",
                "TotalBath", "TotalFlr", "AverageQual", "TotalFacil"]
correlation_matrix = df[new_features + ["SalePrice"]].corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Korelasi Fitur Baru dan SalePrice")
plt.show()

""" Berdasarkan test korelasi, dapat diketahui bahwa ada hubungan positif antara AverageQual (0.71), TotalFlr (0.16), TotalBath (0.61), dan GardenArea (0.30) terhadap harga rumah.

Korelasi yang paling kuat yaitu AverageQual terhadap SalePrice (0.71) dan TotalBath terhadap SalePrice (0.61).

Selain itu juga terdapat fitur yang berkolerasi tinggi dengan fitur yang bukan target yaitu antara fitur AgeHouse  dan AgeSold, karena terjadi multikolinearitas maka salah satu fitur harus dihapus

"""

# hapus fitur AgeSold
df = df.drop('AgeSold', axis=1)

# cek kembali jumlah baris dan kolom
df.shape

# memanggil hanya fitur fitur baru

df1 = df.iloc[:, -11:]
df1.head()

df1.tail()

# cek jumlah row dan column
df1.shape

"""#NEW FEATURES"""

# Melihat columns apa saja yang ada dalam  dataset
df1.columns

df1.describe()

"""Harga rumah ini dari range 34900 sampai 755000 dengan rata-rata harga rumah 163000. Sebaran harga rumahnya yaitu right skew, terlihat dari nilai mean > mediannya.

# FEATURE SELECTION

Pemilihan fitur yang akan dimasukkan ke dalam model. Hanya 2 fitur yang akan dimasukkan ke dalam model regresi karena fitur ini yang memiliki hubungan yang kuat dengan variabel target. Fitur-fitur tersebut adalah AverageQual (0.72), dan TotalBath (0.61).

#MODEL DEVELOPMENT
"""

#pisahkan varible X dan Y, dimana X diisi oleh variable yang dibutuhkan aja yang udah kita tentukan di feature selection
x = df1[['AverageQual','TotalBath']]

y = pd.DataFrame(df1['SalePrice'])

#membagai dataset menjadi data training dan data testing dengan proporsi 80:20
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

x

y

# 80% data untuk dilatih
x_train

"""##Feature Scalling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

""" Penskalaan data pada data latih (x_train) dan data uji (x_test) menggunakan StandardScaler"""

#menampilkan dataset X_train setelah di scaling
np.set_printoptions(suppress=True)
print(x_train[:10])

print(y_train[:10])

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(n_estimators = 100,
                           n_jobs = -1,
                           oob_score = True,
                           bootstrap = True,
                           random_state = 42)
rf.fit(x_train, y_train)

"""Membuat model regresi Random Forest menggunakan scikit-learn"""

# with function ----

# function for creating a feature importance dataframe
def imp_df(column_names, importances):
    df = pd.DataFrame({'feature': column_names,
                       'feature_importance': importances}) \
           .sort_values('feature_importance', ascending = False) \
           .reset_index(drop = True)
    return df

# plotting a feature importance dataframe (horizontal barchart)
def var_imp_plot(imp_df, title):
    imp_df.columns = ['feature', 'feature_importance']
    sns.barplot(x = 'feature_importance', y = 'feature', data = imp_df, orient = 'h', color = 'royalblue') \
       .set_title(title, fontsize = 20)

""" Mengalisis pentingnya fitur (feature importance) dalam model machine learning"""

rfc_fimp = pd.Series(rf.feature_importances_, index = x.columns)
rfc_fimp.sort_values(ascending=False)

"""Nilai 0.77 pada fitur AverageQual dan 0.22 pada fitur TotalBath menggambarkan sejauh mana kedua fitur tersebut berkontribusi dalam menjelaskan variabilitas dalam target SalePrice."""

plt.figure(figsize=(10,6))
rfc_fimp.nlargest(30).sort_values(ascending=False).plot(kind='barh')
round(rfc_fimp,4)*100
plt.title('Important Features',size=12)
plt.show()

"""Perbandingan dua fitur penting yang divisualisasikan dalam plot

## Linear Regression
"""

#Model linear regression untuk memprediksi nilai harga rumah
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train, y_train)

#untuk memprediksi
ypred_lr = model.predict(x_test)

#hasil prediksi y
ypred_lr

# makin tinggi makin bagus akurasinya
display(model.score(x_test, y_test))

"""Nilai 0.6150577525942031 mengindikasikan bahwa model memiliki tingkat akurasi sekitar 61.50% pada data uji

### Evaluate Model
"""

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

"""Menghitung beberapa metrik evaluasi model yang umum digunakan untuk mengukur kinerja model regresi"""

mse_lr = mean_squared_error(y_test, ypred_lr).round(2)
mae_lr = mean_absolute_error(y_test, ypred_lr).round(2)
rmse_lr = np.sqrt(mean_squared_error(y_test, ypred_lr)).round(2) #akar mse

print('MSE : ', mse_lr)
print('MAE : ', mae_lr)
print('RMSE : ', rmse_lr)

"""Model regresi memiliki beberapa tingkat kesalahan dalam memprediksi nilai target. Nilai metrik evaluasi model yang tinggi menunjukkan bahwa kesalahan prediksi cukup besar

### R-Square
"""

#menghitung r2 dengan pembulatan 2 angka setelah koma
r2_lr = r2_score(y_test,ypred_lr).round(2)
r2_lr

"""Model regresi linear hanya memiliki akurasi 62%. Artinya 62%  (AverageQual dan TotalBath) mampu menjelaskan keragaman datanya, sisanya 38% dapat dijelaskan oleh variabel lain di luar model. Model regresi cukup baik jika R2 >= 75%.

Sumber Referensi:
- Mentoring 14 -  Supervised (Regression) & Unsupervised Learning (Clustering)
- Mentoring 9 - Feature Engineering
- Mentoring 8 - EDA dan Data Preprosessing
- Live Session 8 - 15
- Modul Chapter 3 Data Processing - Startup Campus
- https://www.w3schools.com/statistics/statistics_quartiles_and_percentiles.php
- https://www.dicoding.com/academies/615/tutorials/33103
"""